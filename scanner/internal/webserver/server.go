package webserver

import (
	"github.com/0v3rCl0kEd/pentest-suite/scanner/internal/modules"
	"github.com/0v3rCl0kEd/pentest-suite/scanner/internal/modules/portscanner"
	"github.com/0v3rCl0kEd/pentest-suite/scanner/internal/modules/sherlock"
	"github.com/0v3rCl0kEd/pentest-suite/scanner/internal/modules/whois"
	"github.com/gofiber/fiber/v2"
	"log"
	"net"
	"time"
)

var Tasks []modules.Task

func Initialize() {
	go WatchTasks()

	app := fiber.New()

	app.Get("/scan/sherlock/:username", func(c *fiber.Ctx) error {
		scan := sherlock.NewScan(c.Params("username"))
		Tasks = append(Tasks, scan)
		return c.SendStatus(200)
	})

	app.Get("/scan/whois/:domain", func(c *fiber.Ctx) error {
		scan := whois.NewScan(c.Params("domain"))
		Tasks = append(Tasks, scan)
		return c.SendStatus(200)
	})

	app.Get("/scan/portscanner/:ip", func(c *fiber.Ctx) error {
		ip := c.Params("ip")

		if net.ParseIP(ip) == nil {
			return c.SendStatus(400)
		}

		scan := portscanner.NewScan(ip)
		Tasks = append(Tasks, scan)
		return c.SendStatus(200)
	})

	log.Fatal(app.Listen(":3000"))
}

func WatchTasks() {
	for {
		for i, task := range Tasks {
			if task.IsDone() {
				task.SaveResults()

				Tasks = removeTask(Tasks, i)
			}
		}
		time.Sleep(1 * time.Second)
	}
}

func removeTask(s []modules.Task, i int) []modules.Task {
	s[i] = s[len(s)-1]
	return s[:len(s)-1]
}
